name: Build Executables

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']

    env:
      MAIN_PY_FILE: 'main.py'
      ICON_URL: 'https://github.com/PawiX25/OCRder/assets/81538700/c9ab9e2b-fd23-471d-81a9-411d67912ab6'
      ICON_FILE: 'icon.ico'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.x

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
      working-directory: ./

    - name: Install PyInstaller
      run: |
        pip install pyinstaller
      working-directory: ./

    - name: Download Icon
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          powershell.exe -Command "Invoke-WebRequest -Uri ${{ env.ICON_URL }} -OutFile ${{ env.ICON_FILE }}"
        else
          curl -L -o ${{ env.ICON_FILE }} ${{ env.ICON_URL }}
        fi

    - name: Install Chocolatey
      if: matrix.os == 'windows-latest'
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install tesseract

    - name: Install Tesseract OCR
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y libtesseract-dev libleptonica-dev
          sudo apt-get install -y tesseract-ocr-all
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install tesseract
        fi

    - name: Add Tesseract to PATH
      run: echo "Tesseract-OCR/bin" >> $GITHUB_PATH

    - name: Build executable
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          pyinstaller --noconfirm --windowed --icon "${{ env.ICON_FILE }}" --name "OCRder" --clean --optimize 2 --add-data "C:/Program Files/Tesseract-OCR;Tesseract-OCR/" ${{ env.MAIN_PY_FILE }}
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          pyinstaller --noconfirm --windowed --icon "${{ env.ICON_FILE }}" --name "OCRder" --clean --optimize 2 --add-data "/usr/share/tesseract-ocr/5.3.4/tessdata:./tessdata" ${{ env.MAIN_PY_FILE }}
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          pyinstaller --noconfirm --windowed --icon "${{ env.ICON_FILE }}" --name "OCRder" --clean --optimize 2 --add-data "/usr/local/share/tessdata:./tessdata" ${{ env.MAIN_PY_FILE }}
        fi
      working-directory: ./

    - name: Create Artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: windows-executables
        path: dist/

    - name: Create Artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: linux-executables
        path: dist/

    - name: Create Artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: macos-executables
        path: dist/

    - name: List files in dist folder
      run: ls -R ./dist/
